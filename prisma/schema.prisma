// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  email     String    @unique
  password  String    // needed for login/signup
  image     String?
  role      String    // "learner", "teacher", or "both"
  karma     Int       @default(0)

  skills    Skill[]   @relation("UserSkills")
  messagesSent     Message[] @relation("MessagesSent")
  messagesReceived Message[] @relation("MessagesReceived")
  sessionsAsTeacher Session[] @relation("TeacherSessions")
  sessionsAsStudent Session[] @relation("StudentSessions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Skill {
  id        Int       @id @default(autoincrement())
  name      String
  level     String?
  user      User      @relation("UserSkills", fields: [userId], references: [id])
  userId    Int

  sessions  Session[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        Int      @id @default(autoincrement())
  skill     Skill    @relation(fields: [skillId], references: [id])
  skillId   Int

  teacher   User     @relation("TeacherSessions", fields: [teacherId], references: [id])
  teacherId Int

  student   User     @relation("StudentSessions", fields: [studentId], references: [id])
  studentId Int

  startTime DateTime
  endTime   DateTime?
  status    String   @default("pending") // "pending", "confirmed", "completed"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  sender     User     @relation("MessagesSent", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("MessagesReceived", fields: [receiverId], references: [id])
  receiverId Int

  createdAt  DateTime @default(now())
}
